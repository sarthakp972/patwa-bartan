import React from "react";
import { Card, Button } from "react-bootstrap";
import { FaTrash } from "react-icons/fa";
import { Link } from "react-router-dom";
import useCart from "../context/useCart";
import "../Css-page/Cart.css";
import RunningNav from "../Components/RunningNav";

const Cart = () => {
  const { cart, removeFromCart, updateQuantity, getCartCount } = useCart();

  // Function to calculate total price
  const calculateTotal = () => {
    return cart.reduce((acc, product) => {
      const discountedPrice = product.discount
        ? product.Price * (1 - product.discount / 100)
        : product.Price;
      return acc + discountedPrice * product.quantity;
    }, 0).toFixed(2); // Returns total amount with two decimal places
  };

  // Function to format the cart details for WhatsApp
  const formatCartMessage = () => {
    const cartItems = cart.map(product => {
      const discountedPrice = product.discount
        ? product.Price * (1 - product.discount / 100)
        : product.Price;
      return `${product.Title} - Quantity: ${product.quantity}, Price: тВ╣${(discountedPrice * product.quantity).toFixed(2)}`;
    });

    const totalAmount = calculateTotal();
    const message = `Hello Admin,\n\nHere is my order:\n\n${cartItems.join("\n")}\n\nTotal Amount: тВ╣${totalAmount}\n\nThank you!`;
    return encodeURIComponent(message);
  };

  // Function to truncate descriptions
  const truncateDescription = (description) => {
    if (!description) return "No description available";
    return description.length > 70 ? description.substring(0, 70) + "тАж" : description;
  };

  const handleCheckout = () => {
    const message = formatCartMessage();
    const phoneNumber = "9713671554"; // Admin's WhatsApp number
    const url = `https://wa.me/${phoneNumber}?text=${message}`;
    window.open(url, "_blank");
  };

  return (
    <div className="container mt-4 cart-page">
      <RunningNav textArray={["рдкреБрд░рд╛рдиреЗ рдкреАрддрд▓, рдЬрд░реНрдорди, рддрд╛рдВрдмрд╛, рдФрд░ рдХрд╛рдВрд╕реЗ рдХреЗ рдмрд░реНрддрди рдЙрдЪрд┐рдд рджрд╛рдо рдкрд░ рдмрджрд▓реЗ рдФрд░ рдХрд╛рдЯреЗ рдЬрд╛рддреЗ рд╣реИрдВред рдЕрднреА рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ!"]} />
      <h2 className="text-center mb-4">
        ЁЯЫТ Shopping Cart ({getCartCount()} items)
      </h2>

      {cart.length > 0 ? (
        <div className="row">
          {cart.map((product, index) => (
            <div key={index} className="col-lg-6 col-md-12 mb-4">
              <Card className="cart-card">
                <div className="cart-card-body">
                  <Link to={`/product/${product.id}`} className="cart-product-link" style={{ textDecoration: "none", color: "inherit" }}>
                    <Card.Img variant="top" src={product.images?.main || "https://via.placeholder.com/150"} alt={product.Title} className="cart-product-image" />
                    <div className="cart-product-details">
                      <Card.Title className="cart-product-title">{product.Title}</Card.Title>
                      <Card.Text className="cart-product-description">
                        {truncateDescription(product.description)}
                      </Card.Text>
                      <div className="price-section">
                        {product.discount ? (
                          <>
                            <span className="discount-price">тВ╣{(product.Price * (1 - product.discount / 100)).toFixed(2)}</span>
                            <span className="original-price">тВ╣{product.Price}</span>
                            <span className="discount-label">-{product.discount}% OFF</span>
                          </>
                        ) : (
                          <span className="price">тВ╣{product.Price}</span>
                        )}
                      </div>
                    </div>
                  </Link>

                  <div className="cart-quantity">
                    <Button variant="outline-secondary" onClick={() => updateQuantity(product.id, product.quantity - 1)}>-</Button>
                    <span className="cart-quantity-value">{product.quantity}</span>
                    <Button variant="outline-secondary" onClick={() => updateQuantity(product.id, product.quantity + 1)}>+</Button>
                  </div>

                  <Button variant="danger" className="remove-button" onClick={() => removeFromCart(product.id)}>
                    <FaTrash /> Remove
                  </Button>
                </div>
              </Card>
            </div>
          ))}
        </div>
      ) : (
        <p className="text-center">Your cart is empty.</p>
      )}

      {cart.length > 0 && (
        <div className="total-section text-right mt-3">
          <h4>Total: тВ╣{calculateTotal()}</h4>
          <Button variant="success" className="checkout-button" onClick={handleCheckout}>
            рд╡реНрд╣рд╛рдЯреНрд╕рдПрдк рдкрд░ рдЦрд░реАрджреЗрдВ
          </Button>
        </div>
      )}
<hr/>
      {/* New Information Section for WhatsApp Booking */}
      <div className="info-section mt-4 text-center">
        <p>рдЖрдк рд╣рдорд╛рд░реЗ рд╡реНрд╣рд╛рдЯреНрд╕рдПрдк рдкрд░ рдмрд░реНрддрди рдмреБрдХ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ рдФрд░ рдЙрдЪрд┐рдд рджрд╛рдо рдореЗрдВ рджреБрдХрд╛рди рдкрд░ рдЖрдХрд░ рд▓реЗ рд╕рдХрддреЗ рд╣реИрдВред рдпрджрд┐ рдЖрдк рд╕реАрдзреЗ рджреБрдХрд╛рди рд╕реЗ рдЦрд░реАрджрд╛рд░реА рдХрд░рддреЗ рд╣реИрдВ, рддреЛ рдЖрдкрдХреЛ рдмреЗрд╣рддрд░ рдХреАрдордд рдорд┐рд▓ рд╕рдХрддреА рд╣реИред рд╕рд╛рде рд╣реА, рдЖрдкрдХреЛ рд╕реАрдЬрдирд▓ рдбрд┐рд╕реНрдХрд╛рдЙрдВрдЯ рдХрд╛ рд▓рд╛рдн рднреА рдорд┐рд▓ рд╕рдХрддрд╛ рд╣реИред рдпрд╣рд╛рдБ рдЖрдкрдХреЛ рд╡реЛ рдбрд┐рд╕реНрдХрд╛рдЙрдВрдЯ рдорд┐рд▓реЗрдЧрд╛, рдЬреЛ рдХрд╣реАрдВ рдФрд░ рдирд╣реАрдВ рдорд┐рд▓ рд╕рдХрддрд╛, рдЪрд╛рд╣реЗ рд╡рд╣ рдХреЛрдИ рдЕрдиреНрдп рдмрд░реНрддрди рдИ-рдХреЙрдорд░реНрд╕ рд╕рд╛рдЗрдЯ рд╣реЛ рдпрд╛ рдлрд┐рд░ рдХреЛрдИ рджреВрд╕рд░реА рджреБрдХрд╛рдиред рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред</p>
      </div>
      <hr/>
      {/* New Section for Exchange Policy */}
      <div className="exchange-policy-section mt-4 text-center">
        <h3 className="text-primary">рдкреБрд░рд╛рдиреЗ рдмрд░реНрддрди рдПрдХреНрд╕рдЪреЗрдВрдЬ рдиреАрддрд┐</h3>
        <p>
          рдкрдЯрд╡рд╛ рдмрд░реНрддрди рднрдВрдбрд╛рд░ рдореЗрдВ, рд╣рдо рдЖрдкрдХреЗ рдкреБрд░рд╛рдиреЗ рдмрд░реНрддрдиреЛрдВ рдХреЛ рдЙрдЪрд┐рдд рдореВрд▓реНрдп рдкрд░ рдЦрд░реАрджрддреЗ рд╣реИрдВ рдФрд░ рдирдП рдмрд░реНрддрди рд▓реЗрдиреЗ рдкрд░ рднреА рдЖрдкрдХреЛ рдЙрдЪрд┐рдд рджрд░ рдкрд░ рдПрдХреНрд╕рдЪреЗрдВрдЬ рдХреА рд╕реБрд╡рд┐рдзрд╛ рдкреНрд░рджрд╛рди рдХрд░рддреЗ рд╣реИрдВред
        </p>
        <h4>рд╕реНрд╡реАрдХреГрдд рдзрд╛рддреБрдПрдВ:</h4>
        <ul className="list-unstyled">
        <li style={{ color: "goldenrod" }}>рдкреАрддрд▓ (Brass)</li>
  <li style={{ color: "brown" }}>рддрд╛рдВрдмрд╛ (Copper)</li>
  <li style={{ color: "darkolivegreen" }}>рдХрд╛рдВрд╕рд╛ (Kansa)</li>
  <li style={{ color: "silver" }}>рдПрд▓реНрдпреВрдорд┐рдирд┐рдпрдо (Aluminium)</li>
        </ul>
        <p>
          рдпрджрд┐ рдЖрдкрдХреЗ рдкрд╛рд╕ рдЙрдкрд░реЛрдХреНрдд рдзрд╛рддреБрдУрдВ рдХреЗ рдкреБрд░рд╛рдиреЗ рдмрд░реНрддрди рд╣реИрдВ, рддреЛ рддреБрд░рдВрдд рд╣рдорд╛рд░реА рджреБрдХрд╛рди рдкрд░ рдЖрдХрд░ рдЙрдЪрд┐рдд рдореВрд▓реНрдп рдкрд░ рдПрдХреНрд╕рдЪреЗрдВрдЬ рдХрд░реЗрдВред рдЖрдк рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рднреА рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
        </p>
      </div>
      <hr/>
    </div>
  );
};

export default Cart;
